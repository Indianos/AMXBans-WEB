Index: index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n/**\r\n *    AMXBans v7\r\n * Copyright 2009, 2010 by SeToY & |PJ|ShOrTy, 2019 by indianiso1\r\n * This file is part of AMXBans.\r\n *\r\n * AMXBans is free software, but it's licensed under the Creative Commons - Attribution-NonCommercial-ShareAlike 2.0\r\n * AMXBans is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * You should have received a copy of the cc-nC-SA along with AMXBans.\r\n * If not, see http://creativecommons.org/licenses/by-nc-sa/2.0/\r\n */\r\n\r\nsession_start();\r\nrequire_once \"include/class.Site.inc\";\r\n\r\nSite::build();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- index.php	(revision 0a2e845101913ac186e3f4fc4b2676363aeb0f15)
+++ index.php	(date 1597004544809)
@@ -11,6 +11,7 @@
  */
 
 session_start();
+$_SESSION['boot_start'] = hrtime(true);
 require_once "include/class.Site.inc";
 
 Site::build();
\ No newline at end of file
Index: routes/index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php /** @noinspection PhpUnhandledExceptionInspection */\r\n\r\nRoute::get('', 'StartController@index');\r\n\r\nRoute::resource('bans', 'BansController', ['create', 'store']);\r\nRoute::get('bans/{id}/unban', 'BansController@unban');\r\nRoute::post('bans/{id}', 'BansController@comment');\r\n\r\nRoute::get('servers', 'ServersController@index');\r\nRoute::get('servers/{id}', 'ServersController@ajaxServerInfo');\r\n\r\nRoute::get('admins', 'AdminsController@index');\r\nRoute::resource('search', 'SearchController', ['index', 'store'], true);\r\n\r\n\r\nRoute::resource('login', 'LoginController', ['index', 'store'], true);\r\nRoute::get('login/pass_rec', 'LoginController@lostPassForm');\r\nRoute::post('login/pass_rec', 'LoginController@lostPassSend');\r\nRoute::get('login/pass_rec/{id}', 'LoginController@passwordRecovery');\r\nRoute::put('login/pass_rec/{id}', 'LoginController@updatePassword');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- routes/index.php	(revision 0a2e845101913ac186e3f4fc4b2676363aeb0f15)
+++ routes/index.php	(date 1599217103125)
@@ -4,6 +4,7 @@
 
 Route::resource('bans', 'BansController', ['create', 'store']);
 Route::get('bans/{id}/unban', 'BansController@unban');
+Route::resource('bans/{id}/comments', 'BanCommentsController', ['index', 'store', 'create']);
 Route::post('bans/{id}', 'BansController@comment');
 
 Route::get('servers', 'ServersController@index');
Index: include/Controllers/index.BanCommentsController.inc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- include/Controllers/index.BanCommentsController.inc	(date 1599207844289)
+++ include/Controllers/index.BanCommentsController.inc	(date 1599207844289)
@@ -0,0 +1,146 @@
+<?php
+/**
+ *    AMXBans v7
+ * Copyright 2020 by indianiso1
+ * This file is part of AMXBans.
+ *
+ * AMXBans is free software, but it's licensed under the Creative Commons - Attribution-NonCommercial-ShareAlike 2.0
+ * AMXBans is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * You should have received a copy of the cc-nC-SA along with AMXBans.
+ * If not, see http://creativecommons.org/licenses/by-nc-sa/2.0/
+ */
+
+/**  */
+
+namespace Controllers;
+
+use Auth;
+use Captcha;
+use Models\Ban;
+use Models\BansLog;
+use PDO;
+use Support\BaseController;
+use Steam;
+
+/**
+ * Class BanCommentController
+ *
+ * @package Controllers
+ */
+class BanCommentsController extends BaseController
+{
+    public function edit($ban, $id)
+    {
+        if (!Auth::hasPermission('bans_edit') && !Auth::hasPermission('bans_edit', 2)) {
+            $this->site->output->assign('message', ['type' => 'warning', 'text' => \Lang::get('no_access')]);
+            return $this->view($id);
+        }
+
+        $ban = Ban::find($id);
+
+        if (Auth::get('username') != $ban->admin->username && !Auth::hasPermission('bans_edit', 2)) {
+            $this->site->output->assign('message', ['type' => 'warning', 'text' => \Lang::get('no_access')]);
+            return $this->view($id);
+        }
+
+        $this->site->output->assign('ban', $ban);
+        $this->site->output->assign('can_user', [
+            'view_ips' => Auth::hasPermission('ip_view'),
+        ]);
+        $this->site->output->display('index.ban.edit.tpl');
+    }
+
+    public function update($ban, $id)
+    {
+        if (!$this->site->validateFormAuth()) {
+            $this->site->output->assign('message', ['type' => 'warning', 'text' => \Lang::get('invalidCSRF')]);
+            return $this->edit($ban, $id);
+        }
+        if (!Auth::hasPermission('bans_edit') && !Auth::hasPermission('bans_edit', 2)) {
+            $this->site->output->assign('message', ['type' => 'warning', 'text' => \Lang::get('no_access')]);
+            return $this->view($id);
+        }
+
+        $ban = Ban::find($id);
+        if (!$ban->exists) {
+            die(header('HTTP/2.0 404 Not Found'));
+        }
+
+        if (Auth::get('username') != $ban->admin_nick && !Auth::hasPermission('bans_edit', 2)) {
+            $this->site->output->assign('message', ['type' => 'warning', 'text' => \Lang::get('no_access')]);
+            return $this->view($id);
+        }
+
+        $errors = new \FormErrors($_POST, \Lang::get('validation_errors'));
+        $errors->validate([
+            'player_nick' => 'required|max:31',
+            'player_id'   => 'steamid',
+            'edit_reason' => 'required|max:250',
+        ]);
+        if (Auth::hasPermission('ip_view')) {
+            $errors->validate(['player_ip' => 'ip']);
+            $ban->player_ip = $_POST['player_ip'];
+        }
+
+        //Ban length must be the same, permanent (0) or later than now (created+length)
+        if ($_POST['ban_length'] != 0 && $_POST['ban_length'] != $ban->ban_length && $ban->ban_created + $_POST['ban_length'] * 60 < time()) {
+            $errors->addValidationError('ban_length', 'later');
+        }
+        if ($errors->has()) {
+            $this->site->output->assign('messages', $errors);
+            return $this->edit($id);
+        }
+
+        db_log('Ban edit', 'Edit ID ' . $ban->bid . ' (' . $ban->player_nick . ' <' . $ban->player_id . '>)');
+        $ban->player_nick = $_POST['player_nick'];
+        $ban->player_id   = $_POST['player_id'];
+        $ban->ban_type    = in_array($_POST['ban_type'], \Lang::get('ban_types')) ? $_POST['ban_type'] : '';
+        $ban->ban_reason  = $_POST['ban_reason'];
+        $ban->save();
+
+        $bl              = new BansLog();
+        $bl->admin_nick  = Auth::get('username');
+        $bl->bid         = $ban->bid;
+        $bl->edit_reason = $_POST['edit_reason'];
+        $bl->created_at  = new \DateTime();
+        $bl->save();
+
+        $this->site->output->assign('message', \Lang::get('saved'));
+        return $this->edit($id);
+    }
+
+    public function delete($id)
+    {
+    }
+
+    /**
+     * Checks permission and returns model if all ok, false otherwise.
+     *
+     * @param $id
+     * @param $permission
+     *
+     * @return bool|Ban
+     */
+    private function recoverBan($id, $permission)
+    {
+
+        if (!Auth::hasPermission($permission) && !Auth::hasPermission($permission, 2)) {
+            $this->site->output->assign('message', ['type' => 'warning', 'text' => \Lang::get('no_access')]);
+            $this->view($id);
+            return false;
+        }
+
+        $ban = Ban::find($id);
+        if (!$ban->exists) {
+            die(header('HTTP/2.0 404 Not Found'));
+        }
+
+        if (Auth::get('username') != $ban->admin_nick && !Auth::hasPermission($permission, 2)) {
+            $this->site->output->assign('message', ['type' => 'warning', 'text' => \Lang::get('no_access')]);
+            $this->view($id);
+            return false;
+        }
+
+        return $ban;
+    }
+}
\ No newline at end of file
Index: install/index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n/**\r\n *    AMXBans v7\r\n * Copyright 2018 by indianiso1\r\n * This file is part of AMXBans.\r\n *\r\n * AMXBans is free software, but it's licensed under the Creative Commons - Attribution-NonCommercial-ShareAlike 2.0\r\n * AMXBans is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * You should have received a copy of the cc-nC-SA along with AMXBans.\r\n * If not, see http://creativecommons.org/licenses/by-nc-sa/2.0/\r\n */\r\n\r\nsession_start();\r\n\r\nrequire_once \"../include/class.Config.inc\";\r\n$config = new Config(TRUE);\r\n\r\n\r\n/**\r\n * Sites:\r\n * 1. Intro w/ licence agreement\r\n * 2. Checking settings\r\n * 3. Form things\r\n * 4. Review\r\n * 5. Running and completing installation\r\n */\r\n\r\n$site = (int)(Route::getFakePathWay() ?: 1);\r\n$siteMax = Route::getFakePathWay(1) == \"CHECKED\" ? 5 : 4;\r\nif ($site < 1 || $site > $siteMax) $site = 1;\r\n\r\n\r\n$smarty = new Templating($config);\r\n$smarty->setTemplateDir(__DIR__ . '/templates')->setCompileDir(__DIR__ . '/templates');\r\n\r\nswitch ($site)\r\n{\r\n    case 1: // 1. Intro w/ licence agreement\r\n        $langs = scandir('language');\r\n        foreach ($langs as $file)\r\n            if ($file != \".\" && $file != \"..\" && substr($file, 0, 4) != \"lang\" && substr($file, 0, 5) != \"index\")\r\n                $lang[] = explode('.', $file)[0];\r\n        $smarty->assign('languages', $lang);\r\n        break;\r\n\r\n    case 2:\r\n        $php_settings = [\r\n            \"display_errors\"      => toBool(ini_get('display_errors')),\r\n            \"register_globals\"    => toBool(ini_get('register_globals')),\r\n            \"version_php\"         => phpversion(),\r\n            \"server_software\"     => $_SERVER[\"SERVER_SOFTWARE\"],\r\n            \"mysql_enabled\"       => in_array('mysql', PDO::getAvailableDrivers()),\r\n        ];\r\n\r\n        $dirs_settings = [\r\n            \"include\"     => is_writable(Route::getRootPath() . \"/include\"),\r\n            \"templates_c\" => is_writable(Route::getRootPath() . \"/include/templates/compiled\"),\r\n            'uploads'     => is_writable(Route::getRootPath() . '/webSources/uploads'),\r\n        ];\r\n\r\n        if (version_compare(phpversion(), 7.2) > -1 AND $php_settings['mysql_enabled'] AND $dirs_settings['include'] AND $dirs_settings['templates_c'] AND $dirs_settings['uploads'])\r\n            $smarty->assign('next', TRUE);\r\n        $smarty->assign('php_settings', $php_settings);\r\n        $smarty->assign('dirs_settings', $dirs_settings);\r\n        break;\r\n\r\n    case 3:\r\n        if (isset($_POST['validate']))\r\n        {\r\n            $errors = new FormErrors($_POST, \\Lang::get('STEP3_ERRORS'));\r\n            // DATABASE check\r\n            $errors->validate([\r\n                'db_host' => 'required',\r\n                'db_user' => 'required',\r\n                'db_name' => 'required',\r\n            ]);\r\n            $_SESSION[\"db_host\"] = trim($_POST[\"db_host\"]);\r\n            $_SESSION[\"db_user\"] = trim($_POST[\"db_user\"]);\r\n            $_SESSION[\"db_pass\"] = trim($_POST[\"db_pass\"]);\r\n            $_SESSION[\"db_name\"] = trim($_POST[\"db_name\"]);\r\n            $_SESSION[\"db_prefix\"] = trim($_POST[\"db_prefix\"]);\r\n            if (!$errors->has('db_user')) {\r\n                try {\r\n                    $db = new PDO(\"mysql:dbname={$_SESSION['db_name']};host={$_SESSION['db_host']}\", $_SESSION['db_user'], $_SESSION['db_pass']);\r\n                    $db->exec(\"SET CHARSET utf8\");\r\n                } catch (PDOException $e) {\r\n                    $errors->addError(\\Lang::get('STEP3_ERR_DB_CRED') . ': ' . $e->getMessage(), ['db_host', 'db_user', 'db_pass', 'db_name']);\r\n                }\r\n            }\r\n            if (!$errors->has() && $db->query('SELECT * FROM ' . $_SESSION['db_prefix'] . '_webconfig'))\r\n                $errors->addError(\\Lang::get('STEP3_ERR_ALREADY_INSTALLED'), ['db_prefix']);\r\n            if (!$errors->has() && !sql_has_all_privileges($db))\r\n                $errors->addError(\\Lang::get('STEP3_ERR_NO_PRIVILEGES'));\r\n\r\n            // admin account validation\r\n            $errors->validate([\r\n                'admin_email' => 'required',\r\n                'admin_user' => 'required',\r\n                'admin_pass' => 'required',\r\n                'admin_pass2' => 'required|same:admin_pass',\r\n            ]);\r\n            $_SESSION[\"admin_email\"] = trim($_POST[\"admin_email\"]);\r\n            $_SESSION[\"admin_user\"] = trim($_POST[\"admin_user\"]);\r\n            $_SESSION[\"admin_pass\"] = trim($_POST[\"admin_pass\"]);\r\n            $admin_pass = trim($_POST[\"admin_pass2\"]);\r\n\r\n            if (!$errors->has()) {\r\n                $smarty->assign('next', TRUE);\r\n                $_SESSION['OkoK'] = true;\r\n            }\r\n            $smarty->assign('errors', $errors);\r\n        }\r\n        else\r\n            $smarty->assign('errors', new FormErrors([], []));\r\n        break;\r\n\r\n    case 5:\r\n        $smarty->assign('securit', 'here!');\r\n        $smarty->assign('route', Route::getBaseURL());\r\n        break;\r\n}\r\n\r\n// Generate template\r\n$smarty->assign(\"site\", $site);\r\n$smarty->assign(\"version\", $config::version);\r\n\r\n$smarty->display('setup.tpl');\r\n\r\n\r\nfunction sql_has_all_privileges(PDO $db): bool\r\n{\r\n\t//global privileges\r\n\t$query = $db->prepare(\"SHOW GRANTS FOR CURRENT_USER()\");\r\n\t$query->execute();\r\n\t$db_db = $_SESSION[\"db_name\"];\r\n\tforeach ($query->fetchAll() as $v)\r\n\t{\r\n\t\t$v = $v[0];\r\n\t\tif (stristr($v, $db_db) || stristr($v, \"*.*\"))\r\n\t\t{\r\n\t\t\tif (stristr($v, \"ALL PRIVILEGES\"))\r\n\t\t\t\treturn TRUE;\r\n\t\t\telseif (stristr($v, \"SELECT\") && stristr($v, \"INSERT\") && stristr($v, \"UPDATE\") &&\r\n\t\t\t\tstristr($v, \"DELETE\") && stristr($v, \"CREATE\"))\r\n\t\t\t\treturn TRUE;\r\n\t\t}\r\n\t}\r\n\r\n\treturn FALSE;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- install/index.php	(revision 0a2e845101913ac186e3f4fc4b2676363aeb0f15)
+++ install/index.php	(date 1599207844251)
@@ -50,6 +50,7 @@
             "version_php"         => phpversion(),
             "server_software"     => $_SERVER["SERVER_SOFTWARE"],
             "mysql_enabled"       => in_array('mysql', PDO::getAvailableDrivers()),
+            // TODO: Check php-ini -> file_uploads
         ];
 
         $dirs_settings = [
Index: admin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n/**\r\n *    AMXBans v7\r\n * Copyright 2009, 2010 by SeToY & |PJ|ShOrTy, 2019 by indianiso1\r\n * This file is part of AMXBans.\r\n *\r\n * AMXBans is free software, but it's licensed under the Creative Commons - Attribution-NonCommercial-ShareAlike 2.0\r\n * AMXBans is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n * You should have received a copy of the cc-nC-SA along with AMXBans.\r\n * If not, see http://creativecommons.org/licenses/by-nc-sa/2.0/\r\n */\r\n\r\nsession_start();\r\nrequire_once \"include/class.Site.inc\";\r\n\r\nSite::build();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- admin.php	(revision 0a2e845101913ac186e3f4fc4b2676363aeb0f15)
+++ admin.php	(date 1597004794726)
@@ -11,6 +11,7 @@
  */
 
 session_start();
+$_SESSION['boot_start'] = hrtime(true);
 require_once "include/class.Site.inc";
 
 Site::build();
\ No newline at end of file
